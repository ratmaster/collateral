% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plapply.R
\name{plapply}
\alias{plapply}
\title{Parallel, reproducible lapply function with comfort}
\usage{
plapply(X, FUN, ..., progress = FALSE, title = "Progress", memo = FALSE,
  resume = FALSE, eta = FALSE, time = FALSE, threads = 1,
  sameSeed = FALSE, stopOnError = TRUE, seed = NULL, simplify = FALSE)
}
\arguments{
\item{X}{A vector or list. Any object that can be coerced by \code{as.list}.}

\item{FUN}{The function to be applied to each element of X.}

\item{...}{Additional arguments to \code{FUN}.}

\item{progress}{A logical value or a cahracter string. If TRUE or "bar", a modern looking
progress bar shows the status of the computations. Further options are
"batch" and "simple" which print simpler progress bars.}

\item{title}{The printed title of the progress bar.}

\item{memo}{A logical value. If TRUE, \code{FUN} is transformed to memorize its
output per distinct input arguments in an internal cache. If
\code{FUN} is applied to the same input again, it returns the corresponding
cached pre-computed output (see Details).}

\item{resume}{A logical value. If TRUE, the function records the output per iteration
in the folder "tmp". If you re-run the function, it will resume the computations.}

\item{eta}{A logical value. If TRUE, the estimated time (and date) of availability (ETA) is printed}

\item{time}{A logical value. If TRUE, the estimated and the elapsed time of the progress are printed.}

\item{threads}{An integer. The number of threads, i.e. parallel processes, to employ.
Caution: At the moment, only Unix based systems are supported for threads > 1
(see Details).}

\item{sameSeed}{A logical value. If TRUE, the same seed is set before each iteration.}

\item{stopOnError}{A logical value. If TRUE, the execution stops immediately in case of an error. Otherwise,
an error object in place for the failed iteration is returned.}

\item{seed}{An integer. Sets a random seed in the beginning.}

\item{simplify}{A logical value. If TRUE, the resulting list will be transformed (simplified)
by \code{simplify2array()}.}
}
\value{
The function returns \code{TRUE} if no error occurred.
}
\description{
Parallel, reproducible version of R's \code{lapply()} function.
             \strong{Proof of concept - for testing purposes only}
}
\details{
Uniform clear and clean way making computations reproducible. It does not matter, whether
          the computations are performed serially or parallely.

          \strong{Caution:}
          \enumerate{
            \item Currently, non-unix systems are restricted to threads = 1 because they do not support
                  R's parallel mechanism (forking).
            \item Use Option memo = TRUE ONLY for functions that do NOT DRAW RANDOM NUMBERS. Otherwise,
                  the result will be like the functions always proceeds with the same random draw.
          }
}
\seealso{
\code{\link{lapply}}, \code{\link{sapply}}, \code{\link{mclapply}}
          and \code{\link{simplify2array()}}.
}
